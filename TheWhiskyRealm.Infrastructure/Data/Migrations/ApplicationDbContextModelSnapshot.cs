// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheWhiskyRealm.Infrastructure.Data;

#nullable disable

namespace TheWhiskyRealm.Infrastructure.Data
{
    [DbContext(typeof(TheWhiskyRealmDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the article.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("The content of the article.");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("The date the article was created.");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The URL of the image associated with the article.");

                    b.Property<string>("PublisherUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The identifier of the user who published the article.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The title of the article.");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("The type of the article.");

                    b.HasKey("Id");

                    b.HasIndex("PublisherUserId");

                    b.ToTable("Articles", (string)null);

                    b.HasComment("Represents an article entity.");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the award.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The URL of the image associated with the award.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("The title of the award.");

                    b.Property<int>("WhiskyId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the whisky associated with the award.");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("The year the award was given.");

                    b.HasKey("Id");

                    b.HasIndex("WhiskyId");

                    b.ToTable("Awards", (string)null);

                    b.HasComment("Represents an award entity.");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the city.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the country that the city belongs to.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(187)
                        .HasColumnType("nvarchar(187)")
                        .HasComment("The name of the city.");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("The zip code of the city.");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", (string)null);

                    b.HasComment("Represents a city entity.");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the comment.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the article associated with the comment.");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("The content of the comment.");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2")
                        .HasComment("The date the comment was posted.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The identifier of the user who posted the comment.");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);

                    b.HasComment("Represents a comment entity.");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the country.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(62)
                        .HasColumnType("nvarchar(62)")
                        .HasComment("The name of the country.");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);

                    b.HasComment("Represents a country entity.");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Distillery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the distillery.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(57)
                        .HasColumnType("nvarchar(57)")
                        .HasComment("The name of the distillery.");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the region where the distillery is located.");

                    b.Property<int>("YearFounded")
                        .HasColumnType("int")
                        .HasComment("The year the distillery was founded.");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Distilleries", (string)null);

                    b.HasComment("Represents a distillery entity.");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the event.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("The description of the event.");

                    b.Property<int>("DurationInHours")
                        .HasColumnType("int")
                        .HasComment("The duration of the event in hours.");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("The end date of the event.");

                    b.Property<string>("OrganiserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The identifier of the user who organised the event.");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The price of the event.");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("The start date of the event.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("The title of the event.");

                    b.Property<int>("VenueId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the venue where the event will take place.");

                    b.HasKey("Id");

                    b.HasIndex("OrganiserId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events", (string)null);

                    b.HasComment("Represents an event entity.");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the rating.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Finish")
                        .HasColumnType("int")
                        .HasComment("Represents the rating that is given for the whisky finishing notes.");

                    b.Property<int>("Nose")
                        .HasColumnType("int")
                        .HasComment("Represents the rating that is given for the whisky aroma.");

                    b.Property<int>("Taste")
                        .HasColumnType("int")
                        .HasComment("Represents the rating that is given for the whisky taste.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The identifier of the user who gave the rating.");

                    b.Property<int>("WhiskyId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the whisky being rated.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WhiskyId");

                    b.ToTable("Ratings", (string)null);

                    b.HasComment("Represents a rating entity.");

                    b.HasCheckConstraint("CK_Finish_Max", "[Finish] <= 100");

                    b.HasCheckConstraint("CK_Finish_Min", "[Finish] >= 1");

                    b.HasCheckConstraint("CK_Nose_Max", "[Nose] <= 100");

                    b.HasCheckConstraint("CK_Nose_Min", "[Nose] >= 1");

                    b.HasCheckConstraint("CK_Taste_Max", "[Taste] <= 100");

                    b.HasCheckConstraint("CK_Taste_Min", "[Taste] >= 1");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the region.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the country that the region belongs to.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)")
                        .HasComment("The name of the region.");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions", (string)null);

                    b.HasComment("Represents a region entity.");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the review.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("The content of the review.");

                    b.Property<bool>("Recommend")
                        .HasColumnType("bit")
                        .HasComment("If the user recommends status the whisky");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The title of the review.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The identifier of the user who made the review.");

                    b.Property<int>("WhiskyId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the whisky being reviewed.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WhiskyId");

                    b.ToTable("Reviews", (string)null);

                    b.HasComment("Represents a review entity.");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.UserEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the event associated with the user.");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The identifier of the user associated with the event.");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersEvents", (string)null);

                    b.HasComment("Represents a mapping entity between a user and an event.");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the venue.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasComment("The capacity of the venue.");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the city where the venue is located.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the venue.");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Venues", (string)null);

                    b.HasComment("Represents a venue entity.");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Whisky", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the whisky.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasComment("The age of the whisky.");

                    b.Property<double>("AlcoholPercentage")
                        .HasColumnType("float")
                        .HasComment("The alcohol percentage of the whisky.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("The description of the whisky.");

                    b.Property<int>("DistilleryId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the distillery that produced the whisky.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("The name of the whisky.");

                    b.Property<int>("WhiskyTypeId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the type of the whisky.");

                    b.HasKey("Id");

                    b.HasIndex("DistilleryId");

                    b.HasIndex("WhiskyTypeId");

                    b.ToTable("Whiskies", (string)null);

                    b.HasComment("Represents a whisky entity.");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.WhiskyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifier of the whisky type.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The description of the whisky type.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("The name of the whisky type.");

                    b.HasKey("Id");

                    b.ToTable("WhiskyTypes", (string)null);

                    b.HasComment("Represents a whisky type entity.");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasCheckConstraint("CK_Age_Max", "[Age] <= 119");

                    b.HasCheckConstraint("CK_Age_Min", "[Age] >= 18");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Article", b =>
                {
                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.ApplicationUser", "PublisherUser")
                        .WithMany()
                        .HasForeignKey("PublisherUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublisherUser");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Award", b =>
                {
                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.Whisky", "Whisky")
                        .WithMany("Awards")
                        .HasForeignKey("WhiskyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Whisky");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.City", b =>
                {
                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Comment", b =>
                {
                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Distillery", b =>
                {
                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.Region", "Region")
                        .WithMany("Distilleries")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Event", b =>
                {
                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.ApplicationUser", "Organiser")
                        .WithMany()
                        .HasForeignKey("OrganiserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organiser");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Rating", b =>
                {
                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.Whisky", "Whisky")
                        .WithMany("Ratings")
                        .HasForeignKey("WhiskyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Whisky");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Region", b =>
                {
                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Review", b =>
                {
                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.Whisky", "Whisky")
                        .WithMany("Reviews")
                        .HasForeignKey("WhiskyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Whisky");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.UserEvent", b =>
                {
                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.Event", "Event")
                        .WithMany("UsersEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Venue", b =>
                {
                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.City", "City")
                        .WithMany("Venues")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Whisky", b =>
                {
                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.Distillery", "Distillery")
                        .WithMany("Whiskies")
                        .HasForeignKey("DistilleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheWhiskyRealm.Infrastructure.Data.Models.WhiskyType", "WhiskyType")
                        .WithMany("Whiskies")
                        .HasForeignKey("WhiskyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Distillery");

                    b.Navigation("WhiskyType");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.City", b =>
                {
                    b.Navigation("Venues");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Distillery", b =>
                {
                    b.Navigation("Whiskies");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Event", b =>
                {
                    b.Navigation("UsersEvents");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Region", b =>
                {
                    b.Navigation("Distilleries");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.Whisky", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Ratings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("TheWhiskyRealm.Infrastructure.Data.Models.WhiskyType", b =>
                {
                    b.Navigation("Whiskies");
                });
#pragma warning restore 612, 618
        }
    }
}
